// <auto-generated />
using System;
using CrowdFundingApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CrowdFundingApp.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CrowdFundingApp.Models.BonusList", b =>
                {
                    b.Property<int>("bonusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("bonusCost")
                        .HasColumnType("float");

                    b.Property<string>("bonusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("companyId")
                        .HasColumnType("int");

                    b.HasKey("bonusId");

                    b.HasIndex("companyId");

                    b.ToTable("BonusList");
                });

            modelBuilder.Entity("CrowdFundingApp.Models.Comments", b =>
                {
                    b.Property<int>("ComentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("comentDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("comentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("companyId")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ComentId");

                    b.HasIndex("companyId");

                    b.HasIndex("userId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CrowdFundingApp.Models.Company", b =>
                {
                    b.Property<int>("companyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("about")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("companyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("createrId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("endDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastUpdete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("needDonate")
                        .HasColumnType("float");

                    b.Property<double>("rating")
                        .HasColumnType("float");

                    b.Property<string>("startDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("totaldonate")
                        .HasColumnType("float");

                    b.HasKey("companyId");

                    b.HasIndex("createrId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("CrowdFundingApp.Models.CompanyRating", b =>
                {
                    b.Property<int>("voteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("companyId")
                        .HasColumnType("int");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("voteId");

                    b.HasIndex("companyId");

                    b.HasIndex("userId");

                    b.ToTable("CompanyRatings");
                });

            modelBuilder.Entity("CrowdFundingApp.Models.CompanyTag", b =>
                {
                    b.Property<int>("rowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("companyId")
                        .HasColumnType("int");

                    b.Property<int?>("tagId")
                        .HasColumnType("int");

                    b.HasKey("rowId");

                    b.HasIndex("companyId");

                    b.HasIndex("tagId");

                    b.ToTable("CompanyTags");
                });

            modelBuilder.Entity("CrowdFundingApp.Models.CompanyTheme", b =>
                {
                    b.Property<int>("rowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("companyId")
                        .HasColumnType("int");

                    b.Property<int?>("themeId")
                        .HasColumnType("int");

                    b.HasKey("rowId");

                    b.HasIndex("companyId");

                    b.HasIndex("themeId");

                    b.ToTable("CompanyTheme");
                });

            modelBuilder.Entity("CrowdFundingApp.Models.LikeList", b =>
                {
                    b.Property<int>("likeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ComentId")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("likeId");

                    b.HasIndex("ComentId");

                    b.HasIndex("userId");

                    b.ToTable("LikeList");
                });

            modelBuilder.Entity("CrowdFundingApp.Models.News", b =>
                {
                    b.Property<int>("newsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("companyId")
                        .HasColumnType("int");

                    b.Property<string>("newsDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("newsImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("newsName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("newsText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("newsId");

                    b.HasIndex("companyId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("CrowdFundingApp.Models.ResourcesLinks", b =>
                {
                    b.Property<int>("resourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("companyId")
                        .HasColumnType("int");

                    b.Property<string>("link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("resourceId");

                    b.HasIndex("companyId");

                    b.ToTable("ResourcesLinks");
                });

            modelBuilder.Entity("CrowdFundingApp.Models.TagList", b =>
                {
                    b.Property<int>("tagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("tagName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("tagId");

                    b.ToTable("TagLists");
                });

            modelBuilder.Entity("CrowdFundingApp.Models.ThemeList", b =>
                {
                    b.Property<int>("themeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("themeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("themeId");

                    b.ToTable("ThemeLists");
                });

            modelBuilder.Entity("CrowdFundingApp.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("createDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isBlocked")
                        .HasColumnType("bit");

                    b.Property<double>("purce")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CrowdFundingApp.Models.UserBonus", b =>
                {
                    b.Property<int>("rowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("bonusId")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("rowId");

                    b.HasIndex("bonusId");

                    b.HasIndex("userId");

                    b.ToTable("UserBonus");
                });

            modelBuilder.Entity("CrowdFundingApp.Models.UserDonate", b =>
                {
                    b.Property<int>("rowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("companyId")
                        .HasColumnType("int");

                    b.Property<double>("donate")
                        .HasColumnType("float");

                    b.Property<string>("userIdId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("rowId");

                    b.HasIndex("companyId");

                    b.HasIndex("userIdId");

                    b.ToTable("UserDonates");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "036285ef-1876-4e5c-965f-48a966360c63",
                            ConcurrencyStamp = "176085f2-c983-4d87-96df-9cf2e583eb82",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "eec90a58-14cc-4bf5-9c13-59ed78fcaff1",
                            ConcurrencyStamp = "32bfc6ac-1244-41ee-a7a4-8ef967d32a7b",
                            Name = "User",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CrowdFundingApp.Models.BonusList", b =>
                {
                    b.HasOne("CrowdFundingApp.Models.Company", "company")
                        .WithMany("BonusList")
                        .HasForeignKey("companyId");
                });

            modelBuilder.Entity("CrowdFundingApp.Models.Comments", b =>
                {
                    b.HasOne("CrowdFundingApp.Models.Company", "company")
                        .WithMany("Comments")
                        .HasForeignKey("companyId");

                    b.HasOne("CrowdFundingApp.Models.User", "user")
                        .WithMany("Comments")
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("CrowdFundingApp.Models.Company", b =>
                {
                    b.HasOne("CrowdFundingApp.Models.User", "creater")
                        .WithMany("Company")
                        .HasForeignKey("createrId");
                });

            modelBuilder.Entity("CrowdFundingApp.Models.CompanyRating", b =>
                {
                    b.HasOne("CrowdFundingApp.Models.Company", "company")
                        .WithMany("CompanyRatings")
                        .HasForeignKey("companyId");

                    b.HasOne("CrowdFundingApp.Models.User", "user")
                        .WithMany("CompanyRatings")
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("CrowdFundingApp.Models.CompanyTag", b =>
                {
                    b.HasOne("CrowdFundingApp.Models.Company", "company")
                        .WithMany("CompanyTag")
                        .HasForeignKey("companyId");

                    b.HasOne("CrowdFundingApp.Models.TagList", "tag")
                        .WithMany("CompanyTags")
                        .HasForeignKey("tagId");
                });

            modelBuilder.Entity("CrowdFundingApp.Models.CompanyTheme", b =>
                {
                    b.HasOne("CrowdFundingApp.Models.Company", "company")
                        .WithMany("CompanyTheme")
                        .HasForeignKey("companyId");

                    b.HasOne("CrowdFundingApp.Models.ThemeList", "theme")
                        .WithMany("CompanyTheme")
                        .HasForeignKey("themeId");
                });

            modelBuilder.Entity("CrowdFundingApp.Models.LikeList", b =>
                {
                    b.HasOne("CrowdFundingApp.Models.Comments", "coment")
                        .WithMany("LikeLists")
                        .HasForeignKey("ComentId");

                    b.HasOne("CrowdFundingApp.Models.User", "user")
                        .WithMany("LikeLists")
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("CrowdFundingApp.Models.News", b =>
                {
                    b.HasOne("CrowdFundingApp.Models.Company", "company")
                        .WithMany("News")
                        .HasForeignKey("companyId");
                });

            modelBuilder.Entity("CrowdFundingApp.Models.ResourcesLinks", b =>
                {
                    b.HasOne("CrowdFundingApp.Models.Company", "company")
                        .WithMany("ResourcesLinks")
                        .HasForeignKey("companyId");
                });

            modelBuilder.Entity("CrowdFundingApp.Models.UserBonus", b =>
                {
                    b.HasOne("CrowdFundingApp.Models.BonusList", "bonus")
                        .WithMany("UserBonus")
                        .HasForeignKey("bonusId");

                    b.HasOne("CrowdFundingApp.Models.User", "user")
                        .WithMany("UserBonus")
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("CrowdFundingApp.Models.UserDonate", b =>
                {
                    b.HasOne("CrowdFundingApp.Models.Company", "Company")
                        .WithMany("userDonates")
                        .HasForeignKey("companyId");

                    b.HasOne("CrowdFundingApp.Models.User", "userId")
                        .WithMany("userDonates")
                        .HasForeignKey("userIdId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CrowdFundingApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CrowdFundingApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrowdFundingApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CrowdFundingApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
